# -*- coding: utf-8 -*-
"""Image_Classification_Module.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sDporvpV9oVySKK0JkSK-z5RS-K1yxmD
"""

# pip install flask gevent requests pillow
import keras
from keras.preprocessing.image import img_to_array
from keras.applications import imagenet_utils
from PIL import Image
import numpy as np
import flask
import io
import tensorflow as tf
from flask_cors import CORS

app = flask.Flask(__name__)
CORS(app)

model = None

def load_model():
    # load the pre-trained Keras model (here we are using a model
    # pre-trained on ImageNet and provided by Keras, but you can
    # substitute in your own networks just as easily)
    global model
    model = keras.models.load_model('model/EffectiveNetB4_80.h5')

def prepare_image(image, target):
    # if the image mode is not RGB, convert it
    if image.mode != "RGB":
        image = image.convert("RGB")

    # resize the input image and preprocess it
    image = image.resize(target,Image.ANTIALIAS)
    # image = img_to_array(image)
    image=np.asarray(image)
    image=tf.keras.applications.efficientnet.preprocess_input(image)
    image=np.expand_dims(image, axis=0)

    # print(image.shape)
    # return the processed image
    return image

@app.route('/predict',methods=['POST'])
def predict():
    # initialize the data dictionary that will be returned from the
    # view
    data = {"success": False}

    # ensure an image was properly uploaded to our endpoint
    if flask.request.method == "POST":
        if flask.request.files.get( "image"):
            # read the image in PIL format
            image = flask.request.files["image"].read()
            image = Image.open(io.BytesIO(image))
            # print("pass")

            # preprocess the image and prepare it for classification
            image = prepare_image(image, target=(300, 300))


            
            



            # classify the input image and then initialize the list
            # of predictions to return to the client
            # print(image.shape)
            preds = model.predict(image)
            results = preds
            # print(results)
            data["predictions"] = []

            classes=["Basal Cell Carcinoma",
            "Foot corn",
            "Lyme Disease",
            "Psoriasis",
            "acne vulgaris",
            "actinic cheilitis",
            "alopecia",
            "boils",
            "bullous pemphigoid",
            "dermatofibronoma",
            "eczema asteatotic",
            "flea_bites",
            "flexural psoriasis",
            "hives",
            "keloid",
            "kerion",
            "melanocytic nevi",
            "nail_melanoma",
            "prurigo_nodularis",
            "rosacea",
            "scabies",
            "seborrheic keratosis",
            "Striae",
            "vitiligo"]

            # classes=sorted(classes)
            # loop over the results and add them to the list of
            # returned predictions
            index=0
            for (prob) in results[0]:
                r = {"disease_name":classes[index],"probablity": float(prob)}
                data["predictions"].append(r)
                index+=1

            # indicate that the request was a success
            data["predictions"]=sorted(data["predictions"],key= lambda i:i['probablity'],reverse=True)
            data["success"]=True
    # return the data dictionary as a JSON response
    return flask.jsonify(data)

if __name__ == "__main__":
    print(("* Loading Keras model and Flask starting server..."
        "please wait until server has fully started"))
    load_model()
    print(model.summary())
    app.run(host='0.0.0.0',port=5001)
